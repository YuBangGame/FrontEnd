{"version":3,"sources":["locales/resources.js","i18n.js","constants.js","compenonts/ConnectButton.js","App.js","hooks/useHaawk.js","hooks/useCoop.js","hooks/useEgg.js","Tos.js","Whitepaper.js","reportWebVitals.js","index.js"],"names":["resources","en","translation","zh","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","lng","debug","interpolation","escapeValue","TARGET_CHAIN_ID","ChainId","BSCTestnet","COOP_ADDRESS_MAP","BSC","EGG_ADDRESS_MAP","HAAWK_ADDRESS_MAP","HAAWK_DATA_ADDRESS_MAP","ConnectButton","props","t","useTranslation","activateBrowserWallet","useEthers","className","sm","onClick","App","account","chainId","isRightChain","useState","darkMode","setDarkMode","haawkAddress","haawkAbi","useMemo","utils","Interface","haawkAbiJson","haawkContract","Contract","dataAddress","dataAbi","dataAbiJson","coopAddress","useContractCall","abi","address","method","args","minted","useContractFunction","transactionName","mintState","state","mintSend","send","mintHaawk","mintAmount","isStake","value","parseUnits","String","useUserHaawkIds","userAddress","useUserUnstakeChickenIds","filter","v","toNumber","useUserUnstakeHawkIds","useUserCoopChickenIds","useUserPackHawkIds","useHaawk","coopAbi","coopAbiJson","coopContract","stakeInCoopState","stakeInCoopSend","claimEggSend","stakeInCoop","tokenIds","claimEgg","claimEggAndUnstake","useCoop","mintedPercent","parseFloat","setMintAmount","mintAmountChange","useCallback","e","val","target","parseInt","isMintButtonEnable","setMintButtonEnable","handleMint","mintWithStake","then","catch","console","log","eggBalance","useEggBalance","eggAddress","eggAbi","eggAbiJson","useTokenBalance","useEgg","userUnstakeChickenIds","userUnstakeHawkIds","userCoopChickenIds","userCoopHawkIds","checkedCanStakeItems","setCheckedCanStakeItems","handleCanStakeSelect","name","checked","canStakeSelectedList","Object","keys","forEach","key","push","replace","isStakeButtonEnable","setStakeButtonEnable","handleStake","checkedCoopStakeItems","setCheckedCoopStakeItems","handleCoopStakeSelect","coopStakeSelectedList","isClaimButtonEnable","setClaimButtonEnable","handleClaim","handleClaimAndUnstake","Helmet","class","changeLanguage","language","shortenIfAddress","to","alert","href","rel","Math","round","style","whiteSpace","toFixed","type","onChange","placeholder","id","disabled","formatUnits","length","map","tokenId","margin","marginBottom","htmlFor","Tos","Whitepaper","mintFee","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","config","readOnlyChainId","readOnlyUrls","ReactDOM","render","StrictMode","DAppProvider","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.ea2f89cd.chunk.js","sourcesContent":["import enJson from './en.json'\nimport zhJson from './zh.json'\n\nconst resources = {\n    en: {\n        translation: enJson,\n    },\n    zh: {\n        translation: zhJson\n    }\n}\n\nexport default resources;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport resources from './locales/resources'\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    lng: 'en',\n    debug: false,\n    resources: resources,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\nexport default i18n;","import { ChainId } from \"@usedapp/core\";\n\nexport const TARGET_CHAIN_ID = ChainId.BSCTestnet;\n\nexport const COOP_ADDRESS_MAP = {\n    [ChainId.BSC]: \"0x601c0A2BD23e8Ac450F9b6DD46489137D5546bC7\",\n    [ChainId.BSCTestnet]: \"0x601c0A2BD23e8Ac450F9b6DD46489137D5546bC7\",\n};\n\nexport const EGG_ADDRESS_MAP = {\n    [ChainId.BSC]: \"0x35c0eb07059268328a5C887E08836C4DB0eC4975\",\n    [ChainId.BSCTestnet]: \"0x35c0eb07059268328a5C887E08836C4DB0eC4975\",\n};\n\nexport const HAAWK_ADDRESS_MAP = {\n    [ChainId.BSC]: \"0xE184B4d15e67bd45118Fb830974716FA047befC6\",\n    [ChainId.BSCTestnet]: \"0xE184B4d15e67bd45118Fb830974716FA047befC6\",\n};\n\nexport const HAAWK_DATA_ADDRESS_MAP = {\n    [ChainId.BSC]: \"0x6a00783BfA696EB76623e57126c4671c7F3e9B70\",\n    [ChainId.BSCTestnet]: \"0x6a00783BfA696EB76623e57126c4671c7F3e9B70\",\n};","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useEthers } from '@usedapp/core'\n\n\nexport default function ConnectButton(props) {\n    const { t } = useTranslation(); \n    const { activateBrowserWallet } = useEthers()\n\n    return (<>\n        <button className={!props.sm ? \"btn-primary\" : \"btn-primary btn-small\"} onClick={() => activateBrowserWallet()}>{t('Connect')}</button>\n    </>)\n}","import React, { useCallback, useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHaawk } from \"./hooks/useHaawk\";\nimport { useEgg } from \"./hooks/useEgg\";\nimport { useCoop } from \"./hooks/useCoop\";\nimport \"./App.css\";\nimport { useEthers, shortenIfAddress, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport ConnectButton from \"./compenonts/ConnectButton\";\nimport { TARGET_CHAIN_ID } from \"./constants\";\nimport { Link } from 'react-router-dom';\n\nexport default function App() {\n    const { t, i18n } = useTranslation();\n\n    const { account, chainId } = useEthers();\n    // 链检查\n    const isRightChain = chainId === TARGET_CHAIN_ID;\n\n    const [darkMode, setDarkMode] = useState(false);\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n    };\n\n    const {\n        minted,\n        mintHaawk,\n        mintState,\n        useUserHaawkIds,\n        useUserUnstakeChickenIds,\n        useUserUnstakeHawkIds,\n        useUserCoopChickenIds,\n        useUserPackHawkIds,\n    } = useHaawk();\n    const { stakeInCoop, claimEgg, claimEggAndUnstake } = useCoop();\n    // 控制进度条\n    const mintedPercent = (parseFloat(minted) / 10000) * 100.0;\n\n    const [mintAmount, setMintAmount] = useState(1);\n    const mintAmountChange = useCallback((e) => {\n        let val = e.target.value;\n        if (parseInt(val) > 10) {\n            val = 10;\n        }\n        if (parseInt(val) < 1) {\n            val = 1;\n        }\n        setMintAmount(val);\n    }, []);\n\n    // 处理 mint 动作\n    const [isMintButtonEnable, setMintButtonEnable] = useState(true);\n    const handleMint = useCallback(\n        (mintWithStake) => {\n            setMintButtonEnable(false);\n            mintHaawk(mintAmount, mintWithStake)\n                .then(() => {\n                    setMintButtonEnable(true);\n                })\n                .catch((e) => {\n                    console.log(e);\n                    setMintButtonEnable(true);\n                });\n        },\n        [mintAmount, mintHaawk]\n    );\n\n    // 获取钱包内 egg 余额\n    const { useEggBalance } = useEgg();\n    const eggBalance = useEggBalance(account);\n    // 获取 未质押 chicken 列表\n    const userUnstakeChickenIds = useUserUnstakeChickenIds(account);\n    // 获取 未质押 hawk 列表\n    const userUnstakeHawkIds = useUserUnstakeHawkIds(account);\n\n    // 获取 已质押 chicken 列表\n    const userCoopChickenIds = useUserCoopChickenIds(account);\n    // 获取 已质押 hawk 列表\n    const userCoopHawkIds = useUserPackHawkIds(account);\n\n    // 控制 Can Stake 选中列表\n    const [checkedCanStakeItems, setCheckedCanStakeItems] = useState({});\n    const handleCanStakeSelect = (e) => {\n        setCheckedCanStakeItems({\n            ...checkedCanStakeItems,\n            [e.target.name]: e.target.checked,\n        });\n    };\n\n    // Can Stake 选中的 ids\n    let canStakeSelectedList = [];\n    Object.keys(checkedCanStakeItems).forEach((key) => {\n        if (checkedCanStakeItems[key]) {\n            canStakeSelectedList.push(key.replace(\"cst-\", \"\"));\n        }\n    });\n\n    // 处理 Stake 动作\n    const [isStakeButtonEnable, setStakeButtonEnable] = useState(true);\n    const handleStake = useCallback(() => {\n        let canStakeSelectedList = [];\n        Object.keys(checkedCanStakeItems).forEach((key) => {\n            if (checkedCanStakeItems[key]) {\n                canStakeSelectedList.push(key.replace(\"cst-\", \"\"));\n            }\n        });\n\n        setStakeButtonEnable(false);\n        stakeInCoop(account, canStakeSelectedList)\n            .then(() => {\n                setStakeButtonEnable(true);\n            })\n            .catch((e) => {\n                console.log(e);\n                setStakeButtonEnable(true);\n            });\n    }, [account, checkedCanStakeItems, stakeInCoop]);\n\n    // 控制 Coop Staked 选中列表\n    const [checkedCoopStakeItems, setCheckedCoopStakeItems] = useState({});\n    const handleCoopStakeSelect = (e) => {\n        setCheckedCoopStakeItems({\n            ...checkedCoopStakeItems,\n            [e.target.name]: e.target.checked,\n        });\n    };\n\n    // Coop Stake 选中的 ids\n    let coopStakeSelectedList = [];\n    Object.keys(checkedCoopStakeItems).forEach((key) => {\n        if (checkedCoopStakeItems[key]) {\n            coopStakeSelectedList.push(key.replace(\"coop-\", \"\"));\n        }\n    });\n\n    // 处理 Claim 动作\n    const [isClaimButtonEnable, setClaimButtonEnable] = useState(true);\n    const handleClaim = useCallback(() => {\n        let coopStakeSelectedList = [];\n        Object.keys(checkedCoopStakeItems).forEach((key) => {\n            if (checkedCoopStakeItems[key]) {\n                coopStakeSelectedList.push(key.replace(\"coop-\", \"\"));\n            }\n        });\n\n        setClaimButtonEnable(false);\n        claimEgg(coopStakeSelectedList)\n            .then(() => {\n                setClaimButtonEnable(true);\n            })\n            .catch((e) => {\n                console.log(e);\n                setClaimButtonEnable(true);\n            });\n    }, [checkedCoopStakeItems, claimEgg]);\n\n    // 处理 Claim & Unstake 动作\n    const handleClaimAndUnstake = useCallback(() => {\n        let coopStakeSelectedList = [];\n        Object.keys(checkedCoopStakeItems).forEach((key) => {\n            if (checkedCoopStakeItems[key]) {\n                coopStakeSelectedList.push(key.replace(\"coop-\", \"\"));\n            }\n        });\n\n        setClaimButtonEnable(false);\n\n        claimEggAndUnstake(coopStakeSelectedList)\n            .then(() => {\n                setClaimButtonEnable(true);\n            })\n            .catch((e) => {\n                console.log(e);\n                setClaimButtonEnable(true);\n            });\n    }, [checkedCoopStakeItems, claimEggAndUnstake]);\n\n    // const { notifications } = useNotifications()\n    // console.log(notifications);\n\n    return (\n        <>\n            <Helmet>\n                <title>🦅 {t(\"Hawk Game\")}</title>\n                <html class={darkMode ? \"paper dark\" : \"paper light\"} />\n            </Helmet>\n            <div className=\"row flex-center\">\n                <div className=\"col-10 col\">\n                    <center>\n                        <h1>🦅 {t(\"Hawk Game\")}</h1>\n                        {isRightChain ? (\n                            <></>\n                        ) : (\n                            <>\n                                <div className=\"alert alert-danger\">\n                                    {t(\"Wrong Network\")} ChainId = {chainId}\n                                </div>\n                            </>\n                        )}\n                        <p>\n                            <button\n                                className=\"btn-small\"\n                                onClick={() =>\n                                    i18n.changeLanguage(\n                                        i18n.language === \"zh\" ? \"en\" : \"zh\"\n                                    )\n                                }\n                            >\n                                🌏 {t(\"Switch Lang\")}\n                            </button>\n                            <button\n                                className=\"btn-small margin-left\"\n                                onClick={toggleDarkMode}\n                            >\n                                {darkMode ? t(\"Light Mode\") : t(\"Dark Mode\")}\n                            </button>\n                            {account ? (\n                                <>\n                                    <button className=\"btn-small margin-left\">\n                                        {t(\"Address\")}\n                                        <span className=\"badge\">\n                                            {shortenIfAddress(account)}\n                                        </span>\n                                    </button>\n                                </>\n                            ) : (\n                                <span className=\"margin-left\">\n                                    <ConnectButton sm />\n                                </span>\n                            )}\n                        </p>\n                    </center>\n                    <div className=\"row\">\n                        <div className=\"lg-12 sm-12 md-12 col\">\n                            <div className=\"paper container-md margin-left margin-right\">\n                                <center>\n                                    <p>\n                                        {t(\"Description1\")}\n                                        <span className=\"text-secondary\">\n                                            {t(\"Description2\")}\n                                        </span>\n                                        {t(\"Description3\")}\n                                    </p>\n                                    <div>\n                                        <span className=\"margin-small\">\n                                            <Link to=\"/whitepaper\"\n                                                class=\"paper-btn\"\n                                            >\n                                                {t(\"Whitepaper\")}\n                                            </Link>\n                                        </span>\n                                        <span className=\"margin-small\">\n                                            <button\n                                                onClick={() => alert(\"Soooon\")}\n                                            >\n                                                {t(\"Discord\")}\n                                            </button>\n                                        </span>\n                                        <span className=\"margin-small\">\n                                            <a\n                                                href=\"https://pancakeswap.finance/swap?outputCurrency=0x8f0528ce5ef7b51152a59745befdd91d97091d2f\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                                class=\"paper-btn\"\n                                            >\n                                                {t(\"Buy EGG\")}\n                                            </a>\n                                        </span>\n                                        <span className=\"margin-small\">\n                                            <button\n                                                onClick={() => alert(\"Soooon\")}\n                                            >\n                                                {t(\"Twitter\")}\n                                            </button>\n                                        </span>\n                                    </div>\n                                    <div className=\"margin\">\n                                        <Link to=\"/tos\">{t(\"TOS\")}</Link>\n                                    </div>\n                                </center>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row flex-center\">\n                        <div className=\"sm-12 md-12 lg-6 col\">\n                            <div className=\"paper container-md margin\">\n                                <h3>{t(\"Minting\")}</h3>\n                                <p>\n                                    {minted} / {10000} GEN 0 {t(\"Minted\")}\n                                </p>\n                                <div className=\"progress margin-bottom\">\n                                    <div\n                                        className={`bar striped secondary w-${Math.round(\n                                            mintedPercent\n                                        )}`}\n                                    >\n                                        <span\n                                            className=\"margin-left\"\n                                            style={{ whiteSpace: \"nowrap\" }}\n                                        >\n                                            {mintedPercent.toFixed(2)} %\n                                        </span>\n                                    </div>\n                                </div>\n                                <p>\n                                    {t(\"Amount\")}\n                                    <input\n                                        type=\"number\"\n                                        value={mintAmount}\n                                        onChange={mintAmountChange}\n                                        placeholder=\"\"\n                                        id=\"mint-amount\"\n                                    />\n                                </p>\n                                <p>\n                                    {t(\"Cost\")}\n                                    {mintAmount * 0.01} BNB\n                                </p>\n                                <div>\n                                    {account ? (\n                                        <>\n                                            <button\n                                                onClick={() =>\n                                                    handleMint(false)\n                                                }\n                                                disabled={!isMintButtonEnable}\n                                            >\n                                                {t(\"Mint\")}\n                                            </button>\n                                            <button\n                                                className=\"margin-left\"\n                                                onClick={() => handleMint(true)}\n                                                disabled={!isMintButtonEnable}\n                                            >\n                                                {t(\"Mint and Stake\")}\n                                            </button>\n                                        </>\n                                    ) : (\n                                        <ConnectButton />\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"sm-12 md-12 lg-6 col\">\n                            <div className=\"paper container-md margin\">\n                                <p>\n                                    {t(\"Wallet Tips\")}\n                                    <span className=\"text-secondary\">\n                                        {eggBalance\n                                            ? parseFloat(\n                                                  formatUnits(eggBalance, 18)\n                                              ).toFixed(4)\n                                            : \"-\"}\n                                    </span>{\" \"}\n                                    $EGG\n                                </p>\n                                <h3>{t(\"Unstaked\")}</h3>\n                                <ul>\n                                    <li>{t(\"Can Stake\")}</li>\n                                    <ul>\n                                        {userUnstakeHawkIds.length > 0 ? (\n                                            userUnstakeHawkIds.map((v) => {\n                                                const tokenId = v.toNumber();\n                                                return (\n                                                    <div\n                                                        key={tokenId}\n                                                        style={{\n                                                            margin: \"0 !important\",\n                                                        }}\n                                                    >\n                                                        <span\n                                                            className=\"form-group\"\n                                                            style={{\n                                                                marginBottom:\n                                                                    \"0 !important\",\n                                                            }}\n                                                        >\n                                                            <label\n                                                                htmlFor={`cst-${tokenId}`}\n                                                                className=\"paper-check\"\n                                                            >\n                                                                <input\n                                                                    type=\"checkbox\"\n                                                                    name={`cst-${tokenId}`}\n                                                                    id={`cst-${tokenId}`}\n                                                                    checked={\n                                                                        checkedCanStakeItems[\n                                                                            `cst-${tokenId}`\n                                                                        ] ||\n                                                                        false\n                                                                    }\n                                                                    onChange={\n                                                                        handleCanStakeSelect\n                                                                    }\n                                                                />\n                                                                <span>\n                                                                    # {tokenId}{\" \"}\n                                                                    🦅\n                                                                </span>\n                                                            </label>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            })\n                                        ) : (\n                                            <></>\n                                        )}\n                                    </ul>\n                                    <ul>\n                                        {userUnstakeChickenIds.length > 0 ? (\n                                            userUnstakeChickenIds.map((v) => {\n                                                const tokenId = v.toNumber();\n                                                return (\n                                                    <div\n                                                        key={tokenId}\n                                                        style={{\n                                                            margin: \"0 !important\",\n                                                        }}\n                                                    >\n                                                        <span\n                                                            className=\"form-group\"\n                                                            style={{\n                                                                marginBottom:\n                                                                    \"0 !important\",\n                                                            }}\n                                                        >\n                                                            <label\n                                                                htmlFor={`cst-${tokenId}`}\n                                                                className=\"paper-check\"\n                                                            >\n                                                                <input\n                                                                    type=\"checkbox\"\n                                                                    name={`cst-${tokenId}`}\n                                                                    id={`cst-${tokenId}`}\n                                                                    checked={\n                                                                        checkedCanStakeItems[\n                                                                            `cst-${tokenId}`\n                                                                        ] ||\n                                                                        false\n                                                                    }\n                                                                    onChange={\n                                                                        handleCanStakeSelect\n                                                                    }\n                                                                />\n                                                                <span>\n                                                                    # {tokenId}{\" \"}\n                                                                    🐤\n                                                                </span>\n                                                            </label>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            })\n                                        ) : (\n                                            <></>\n                                        )}\n                                    </ul>\n                                    <ul>\n                                        {userUnstakeChickenIds.length < 1 &&\n                                        userUnstakeHawkIds.length < 1 ? (\n                                            <div className=\"badge\">\n                                                {t(\"No Tokens\")}\n                                            </div>\n                                        ) : (\n                                            <></>\n                                        )}\n                                    </ul>\n                                </ul>\n                                {canStakeSelectedList &&\n                                canStakeSelectedList.length > 0 ? (\n                                    <div>\n                                        <p>\n                                            {t(\"Selected\")}\n                                            {canStakeSelectedList.map((v) => (\n                                                <span key={`css-key-${v}`}>\n                                                    #{v}{\" \"}\n                                                </span>\n                                            ))}\n                                        </p>\n                                        <button\n                                            disabled={!isStakeButtonEnable}\n                                            onClick={() => handleStake()}\n                                        >\n                                            {t(\"Stake Selected\")}\n                                        </button>\n                                    </div>\n                                ) : (\n                                    <></>\n                                )}\n                                <h3>{t(\"Staked\")}</h3>\n                                <ul>\n                                    <li>{t(\"Coop\")}</li>\n\n                                    <ul>\n                                        {userCoopChickenIds &&\n                                        userCoopChickenIds.length > 0 ? (\n                                            userCoopChickenIds.map((v) => {\n                                                const tokenId = v.toNumber();\n                                                return (\n                                                    <div\n                                                        key={tokenId}\n                                                        style={{\n                                                            margin: \"0 !important\",\n                                                        }}\n                                                    >\n                                                        <span\n                                                            className=\"form-group\"\n                                                            style={{\n                                                                marginBottom:\n                                                                    \"0 !important\",\n                                                            }}\n                                                        >\n                                                            <label\n                                                                htmlFor={`coop-${tokenId}`}\n                                                                className=\"paper-check\"\n                                                            >\n                                                                <input\n                                                                    type=\"checkbox\"\n                                                                    name={`coop-${tokenId}`}\n                                                                    id={`coop-${tokenId}`}\n                                                                    checked={\n                                                                        checkedCoopStakeItems[\n                                                                            `coop-${tokenId}`\n                                                                        ] ||\n                                                                        false\n                                                                    }\n                                                                    onChange={\n                                                                        handleCoopStakeSelect\n                                                                    }\n                                                                />\n                                                                <span>\n                                                                    # {tokenId}{\" \"}\n                                                                    🐤\n                                                                </span>\n                                                            </label>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            })\n                                        ) : (\n                                            <div className=\"badge\">\n                                                {t(\"No Tokens\")}\n                                            </div>\n                                        )}\n                                    </ul>\n                                </ul>\n\n                                <ul>\n                                    <li>{t(\"Hawk Pack\")}</li>\n                                    <ul>\n                                        {userCoopHawkIds &&\n                                        userCoopHawkIds.length > 0 ? (\n                                            userCoopHawkIds.map((v) => {\n                                                const tokenId = v.toNumber();\n                                                return (\n                                                    <div\n                                                        key={tokenId}\n                                                        style={{\n                                                            margin: \"0 !important\",\n                                                        }}\n                                                    >\n                                                        <span\n                                                            className=\"form-group\"\n                                                            style={{\n                                                                marginBottom:\n                                                                    \"0 !important\",\n                                                            }}\n                                                        >\n                                                            <label\n                                                                htmlFor={`coop-${tokenId}`}\n                                                                className=\"paper-check\"\n                                                            >\n                                                                <input\n                                                                    type=\"checkbox\"\n                                                                    name={`coop-${tokenId}`}\n                                                                    id={`coop-${tokenId}`}\n                                                                    checked={\n                                                                        checkedCoopStakeItems[\n                                                                            `coop-${tokenId}`\n                                                                        ] ||\n                                                                        false\n                                                                    }\n                                                                    onChange={\n                                                                        handleCoopStakeSelect\n                                                                    }\n                                                                />\n                                                                <span>\n                                                                    # {tokenId}{\" \"}\n                                                                    🦅\n                                                                </span>\n                                                            </label>\n                                                        </span>\n                                                    </div>\n                                                );\n                                            })\n                                        ) : (\n                                            <div className=\"badge\">\n                                                {t(\"No Tokens\")}\n                                            </div>\n                                        )}\n                                    </ul>\n                                </ul>\n\n                                {coopStakeSelectedList &&\n                                coopStakeSelectedList.length > 0 ? (\n                                    <div>\n                                        <p>\n                                            {t(\"Selected\")}\n                                            {coopStakeSelectedList.map((v) => (\n                                                <span key={`css-key-${v}`}>\n                                                    #{v}{\" \"}\n                                                </span>\n                                            ))}\n                                        </p>\n                                        <button\n                                            disabled={!isClaimButtonEnable}\n                                            onClick={() => handleClaim()}\n                                        >\n                                            {t(\"Claim\")}\n                                        </button>\n                                        <button\n                                            disabled={!isClaimButtonEnable}\n                                            onClick={() =>\n                                                handleClaimAndUnstake()\n                                            }\n                                            className=\"margin-left\"\n                                        >\n                                            {t(\"Claim and Unstake\")}\n                                        </button>\n                                    </div>\n                                ) : (\n                                    <></>\n                                )}\n                                <p className=\"text-muted\">{t(\"Select Tips\")}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row flex-center\">\n                        <div className=\"col\">\n                            <p className=\"text-muted\">{t(\"Footer\")}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n","import haawkAbiJson from \"../abi/haawk.json\";\nimport dataAbiJson from \"../abi/haawk_data.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useMemo } from \"react\";\nimport { useContractCall, useContractFunction } from \"@usedapp/core\";\nimport { COOP_ADDRESS_MAP, HAAWK_ADDRESS_MAP, HAAWK_DATA_ADDRESS_MAP, TARGET_CHAIN_ID } from '../constants';\n\n\nexport function useHaawk() {\n    const haawkAddress = HAAWK_ADDRESS_MAP[TARGET_CHAIN_ID];\n    const haawkAbi = useMemo(() => new utils.Interface(haawkAbiJson), []);\n    const haawkContract = useMemo(\n        () => new Contract(haawkAddress, haawkAbi),\n        [haawkAddress, haawkAbi]\n    );\n\n    const dataAddress = HAAWK_DATA_ADDRESS_MAP[TARGET_CHAIN_ID];\n    const dataAbi = useMemo(() => new utils.Interface(dataAbiJson), []);\n\n    const coopAddress = COOP_ADDRESS_MAP[TARGET_CHAIN_ID];\n\n    const [minted] = useContractCall({\n        abi: haawkAbi,\n        address: haawkAddress,\n        method: \"minted\",\n        args: [],\n    }) ?? [\"-\"];\n\n    const { state: mintState, send: mintSend } = useContractFunction(\n        haawkContract,\n        \"mint\",\n        {\n            transactionName: \"Mint Haawk\",\n        }\n    );\n\n    const mintHaawk = (mintAmount, isStake) => {\n        return mintSend(mintAmount, isStake, {\n            value: utils.parseUnits(String(0.01 * mintAmount), \"ether\"),\n        });\n    };\n\n    const useUserHaawkIds = (userAddress) => {\n        const [userHaawkIds] =\n            useContractCall(haawkAddress &&\n                userAddress && {\n                abi: dataAbi,\n                address: dataAddress,\n                method: \"getUserHaawkIds\",\n                args: [haawkAddress, userAddress],\n            }) ?? [[]];\n        return userHaawkIds;\n    };\n\n    const useUserUnstakeChickenIds = (userAddress) => {\n        const [userUnstakeChickenIds] =\n            useContractCall(haawkAddress &&\n                userAddress && {\n                abi: dataAbi,\n                address: dataAddress,\n                method: \"getUserUnstakeChickenIds\",\n                args: [haawkAddress, userAddress],\n            }) ?? [[]];\n        return userUnstakeChickenIds.filter(v => v.toNumber() > 0);\n    };\n\n    const useUserUnstakeHawkIds = (userAddress) => {\n        const [userUnstakeHawkIds] =\n            useContractCall(haawkAddress &&\n                userAddress && {\n                abi: dataAbi,\n                address: dataAddress,\n                method: \"getUserUnstakeHawkIds\",\n                args: [haawkAddress, userAddress],\n            }) ?? [[]];\n        return userUnstakeHawkIds.filter(v => v.toNumber() > 0);\n    };\n\n    const useUserCoopChickenIds = (userAddress) => {\n        const [userCoopHaawkIds] =\n            useContractCall(coopAddress &&\n                userAddress && {\n                abi: dataAbi,\n                address: dataAddress,\n                method: \"getUserCoopChickenIds\",\n                args: [coopAddress, userAddress],\n            }) ?? [[]];\n        return userCoopHaawkIds.filter(v => v.toNumber() > 0);\n    }\n\n    const useUserPackHawkIds = (userAddress) => {\n        const [userPackHawkIds] =\n            useContractCall(coopAddress &&\n                userAddress && {\n                abi: dataAbi,\n                address: dataAddress,\n                method: \"getUserPackHawkIds\",\n                args: [coopAddress, userAddress],\n            }) ?? [[]];\n        return userPackHawkIds.filter(v => v.toNumber() > 0);\n    }\n\n    return { minted, mintHaawk, mintState, useUserHaawkIds, useUserUnstakeChickenIds, useUserUnstakeHawkIds, useUserCoopChickenIds, useUserPackHawkIds };\n}\n","import coopAbiJson from \"../abi/coop.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useMemo } from \"react\";\nimport { useContractFunction } from \"@usedapp/core\";\nimport { COOP_ADDRESS_MAP, TARGET_CHAIN_ID } from '../constants';\n\n\nexport function useCoop() {\n    const coopAddress = COOP_ADDRESS_MAP[TARGET_CHAIN_ID];\n    const coopAbi = useMemo(() => new utils.Interface(coopAbiJson), []);\n    const coopContract = useMemo(\n        () => new Contract(coopAddress, coopAbi),\n        [coopAddress, coopAbi]\n    );\n\n    const { state: stakeInCoopState, send: stakeInCoopSend } = useContractFunction(\n        coopContract,\n        \"addManyToCoopAndPack\",\n        {\n            transactionName: \"Stake Haawk\",\n        }\n    );\n\n    const stakeInCoop = (userAddress, tokenIds) => {\n        return stakeInCoopSend(userAddress, tokenIds);\n    };\n\n    const { state: claimEggState, send: claimEggSend } = useContractFunction(\n        coopContract,\n        \"claimManyFromCoopAndPack\",\n        {\n            transactionName: \"Claim Egg\",\n        }\n    );\n\n    const claimEgg = (tokenIds) => {\n        return claimEggSend(tokenIds, false);\n    }\n\n    const claimEggAndUnstake = (tokenIds) => {\n        return claimEggSend(tokenIds, true);\n    }\n    \n    return { stakeInCoop, stakeInCoopState, claimEgg, claimEggAndUnstake};\n}\n","import eggAbiJson from \"../abi/egg.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useMemo } from \"react\";\nimport { useTokenBalance } from \"@usedapp/core\";\nimport { EGG_ADDRESS_MAP, TARGET_CHAIN_ID } from '../constants'; \n\nexport function useEgg() {\n    const eggAddress = EGG_ADDRESS_MAP[TARGET_CHAIN_ID];\n    const eggAbi = useMemo(() => new utils.Interface(eggAbiJson), []);\n    const eggContract = useMemo(\n        () => new Contract(eggAddress, eggAbi),\n        [eggAddress, eggAbi]\n    );\n\n    const useEggBalance = (address) => useTokenBalance(eggAddress, address)\n    \n    return { useEggBalance };\n}\n","export default function Tos() {\n    return (\n        <div className=\"paper container\">\n            <article className=\"article\">\n                <h1 className=\"article-title\">TERMS & CONDITIONS</h1>\n                <p className=\"article-meta\">\n                    Written by The Hawk Game Developers\n                </p>\n                <p>\n                    This Hawk Game Terms and Conditions (this “Agreement”) is a\n                    legally binding agreement by and between “The Hawk Game Developers”\n                    (“us” or “we”) and any owner\n                    of any Haawk (defined below) (“you” or “Purchaser”). The\n                    Hawk Game Developers and each Purchaser may be referred to\n                    throughout this Agreement collectively as the “Parties” or\n                    individually as a “Party”. By purchasing or otherwise owning\n                    a Haawk, you acknowledge that you have carefully read and\n                    agree to the terms of this Agreement. This website and its\n                    connected services are provided “as is” and “as available”\n                    without warranty of any kind. By using this website you are\n                    accepting sole responsibility for any and all transactions\n                    involving Hawk Game digital collectibles.\n                </p>\n                <p>\n                    Your purchase from The Hawk Game Developers or purchase from\n                    any owner of an NFT originally produced by The Hawk Game\n                    Developers does not constitute a financial investment. You\n                    are buying a piece of art that lives on the Ethereum\n                    blockchain.\n                </p>\n                <p className=\"text-lead\">\n                    WHEN YOU AGREE TO THESE TERMS, YOU ARE AGREEING (WITH\n                    LIMITED EXCEPTION) TO RESOLVE ANY DISPUTE BETWEEN YOU AND US\n                    THROUGH BINDING, INDIVIDUAL ARBITRATION RATHER THAN IN\n                    COURT.\n                </p>\n                <p>\n                    1. Agreement to Terms. “Haawk” refers to a non-fungible\n                    token (NFT) (i.e., a controllable electronic record recorded\n                    on a blockchain) that, as of its genesis issuance, is linked\n                    to an image of a hawk or chicken, as applicable. “Haawk Art”\n                    means the image of the specific chicken or hawk linked to a\n                    particular NFT, which images consists of elements of art\n                    compiled by the underlying Hawk Game smart contract. For\n                    avoidance of doubt, the Haawk Art is digital in nature and\n                    does not include, is not linked to, and is not sold together\n                    with, any items or representations that have physical\n                    dimensions such as mass or volume. (a) Additional Terms:\n                    Haawks may be available for purchase on one or more\n                    third-party platforms, such as OpenSea (each, a “NFT\n                    Marketplace”), which we do not operate. The access and use\n                    of the NFT Marketplace are subject to the separate terms of\n                    the NFT Marketplace.\n                </p>\n                <p>\n                    2. Ownership of Haawk. (a) When Purchaser acquires a Haawk,\n                    Purchaser owns all personal property rights to that Haawk\n                    (e.g., the right to freely sell, transfer, or otherwise\n                    dispose of that Haawk). The Haawk Art, however, is free for\n                    use by anyone for any purpose without restriction under\n                    copyright law. Public domain is the purest form of open and\n                    free, since no one owns or controls the material in any way.\n                    (b) Purchaser represents and warrants that it will not\n                    transfer a Haawk in any subsequent transaction to a\n                    Transferee that is (i) located in a country that is subject\n                    to a U.S. Government embargo, or that has been designated by\n                    the U.S. Government as a terrorist-supporting country; or is\n                    (ii) listed on any U.S. Government list of prohibited or\n                    restricted parties (“Prohibited Transferees”).\n                </p>\n                <p>\n                    3. Fees and Payments (a) If you elect to purchase a Haawk\n                    through the website, any financial transactions that you\n                    engage in will be conducted solely through the Ethereum\n                    network. We will have no insight into or control over these\n                    payments or transactions, nor do we have the ability to\n                    reverse any transactions. We will have no liability to you\n                    or to any third party for any claims or damages that may\n                    arise as a result of any transactions that you engage or any\n                    other transactions that you conduct via the Ethereum\n                    network. (b) Ethereum requires the payment of a transaction\n                    fee (a “Gas Fee”) for every transaction that occurs on the\n                    Ethereum network. The Gas Fee funds the network of computers\n                    that run the decentralized Ethereum network. This means that\n                    you will need to pay a Gas Fee for each transaction.\n                </p>\n                <p>\n                    4. Transfers. All subsequent transactions of the Haawks are\n                    subject to the following terms: (a) the Haawk transferee\n                    (the “Transferee”) shall, by purchasing, accepting,\n                    accessing or otherwise using the Haawk or Haawk Art, be\n                    deemed to accept all of the terms of this Agreement as a\n                    “Purchaser” hereof; and (b) the Haawk transferor (the\n                    “Transferor”) shall provide notice to the Transferee of this\n                    Agreement, including a link or other method by which the\n                    terms of this Agreement can be accessible by the Transferee.\n                    Purchaser further acknowledges and agrees that all\n                    subsequent transactions of the Haawk will be effected on the\n                    blockchain network governing the Haawk, and Purchaser will\n                    be required to make or receive payments exclusively through\n                    its cryptocurrency wallet.\n                </p>\n                <p>\n                    5. The Hawk Game Developers’ Rights and Obligations to the\n                    Haawk Art and Haawks. The Parties acknowledge and agree that\n                    we are not responsible for repairing, supporting, replacing,\n                    or maintaining any website.\n                </p>\n                <p>\n                    6. Warranty Disclaimers and Assumption of Risk. Purchaser\n                    represents and warrants that it (a) is the age of majority\n                    in Purchaser’s place of residence (which is typically 18\n                    years of age in most U.S. states) and has the legal capacity\n                    to enter into this Agreement, (b) that Purchaser will use\n                    and interact with the Haawks and Haawks Art only for lawful\n                    purposes and in accordance with this Agreement, and (c) that\n                    Purchaser will not use the Haawks or Haawks Art to violate\n                    any law, regulation or ordinance or any right of The Hawk\n                    Game Developers, its licensors or any third party, including\n                    without limitation, any right of privacy, publicity,\n                    copyright, trademark, or patent. Purchaser further agrees\n                    that it will comply with all applicable law. THE HAAWKS ARE\n                    PROVIDED “AS IS,” WITHOUT WARRANTY OF ANY KIND. WITHOUT\n                    LIMITING THE FOREGOING, THE HAWK GAME DEVELOPERS EXPLICITLY\n                    DISCLAIM ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS\n                    FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT AND NON-\n                    INFRINGEMENT, AND ANY WARRANTIES ARISING OUT OF COURSE OF\n                    DEALING OR USAGE OF TRADE. THE HAWK GAME DEVELOPERS MAKE NO\n                    WARRANTY THAT THE HAAWKS WILL MEET PURCHASER’S REQUIREMENTS\n                    OR BE AVAILABLE ON AN UNINTERRUPTED, SECURE, OR ERROR-FREE\n                    BASIS. THE HAWK GAME DEVELOPERS MAKE NO WARRANTY REGARDING\n                    THE QUALITY, ACCURACY, TIMELINESS, TRUTHFULNESS,\n                    COMPLETENESS OR RELIABILITY OF ANY INFORMATION OR CONTENT ON\n                    THE HAAWKS. THE HAWK GAME DEVELOPERS WILL NOT BE RESPONSIBLE\n                    OR LIABLE TO PURCHASER FOR ANY LOSS AND TAKES NO\n                    RESPONSIBILITY FOR, AND WILL NOT BE LIABLE TO YOU FOR, ANY\n                    USE OF THE HAAWK, INCLUDING BUT NOT LIMITED TO ANY LOSSES,\n                    DAMAGES OR CLAIMS ARISING FROM: (I) USER ERROR SUCH AS\n                    FORGOTTEN PASSWORDS, INCORRECTLY CONSTRUCTED TRANSACTIONS,\n                    OR MISTYPED WALLET ADDRESSES; (II) SERVER FAILURE OR DATA\n                    LOSS; (III) CORRUPTED CRYPTOCURRENCY WALLET FILES; (IV)\n                    UNAUTHORIZED ACCESS TO THE HAAWK; OR (V) ANY UNAUTHORIZED\n                    THIRD PARTY ACTIVITIES, INCLUDING WITHOUT LIMITATION THE USE\n                    OF VIRUSES, PHISHING, BRUTEFORCING OR OTHER MEANS OF ATTACK\n                    AGAINST BLOCKCHAIN NETWORK UNDERLYING THE HAAWKS. THE HAAWKS\n                    ARE INTANGIBLE DIGITAL ASSETS. THEY EXIST ONLY BY VIRTUE OF\n                    THE OWNERSHIP RECORD MAINTAINED IN THE APPLICABLE BLOCKCHAIN\n                    NETWORK. ANY TRANSFER OF TITLE THAT MIGHT OCCUR IN ANY\n                    UNIQUE DIGITAL ASSET OCCURS ON THE DECENTRALIZED LEDGER\n                    WITHIN SUCH BLOCKCHAIN NETWORK, WHICH WE DO NOT CONTROL. THE\n                    HAWK GAME DEVELOPERS DO NOT GUARANTEE THAT THE HAWK GAME\n                    DEVELOPERS CAN EFFECT THE TRANSFER OF TITLE OR RIGHT IN ANY\n                    HAAWK. PURCHASER BEARS FULL RESPONSIBILITY FOR VERIFYING THE\n                    IDENTITY, LEGITIMACY, AND AUTHENTICITY OF ASSETS PURCHASER\n                    PURCHASES THROUGH THE NFT MARKETPLACE. NOTWITHSTANDING\n                    INDICATORS AND MESSAGES THAT SUGGEST VERIFICATION, WE MAKE\n                    NO CLAIMS ABOUT THE IDENTITY, LEGITIMACY, OR AUTHENTICITY OF\n                    ASSETS ON THE NFT MARKETPLACE OR ANY PURPORTED SUBSEQUENT\n                    TRANSACTIONS. WE ARE NOT RESPONSIBLE ANY KIND OF FAILURE,\n                    ABNORMAL BEHAVIOR OF SOFTWARE (E.G., WALLET, SMART\n                    CONTRACT), BLOCKCHAINS OR ANY OTHER FEATURES OF THE HAAWKS.\n                    THE HAWK GAME DEVELOPERS ARE NOT RESPONSIBLE FOR CASUALTIES\n                    DUE TO LATE REPORT BY DEVELOPERS OR REPRESENTATIVES (OR NO\n                    REPORT AT ALL) OF ANY ISSUES WITH THE BLOCKCHAIN SUPPORTING\n                    THE HAAWKS, INCLUDING FORKS, TECHNICAL NODE ISSUES OR ANY\n                    OTHER ISSUES HAVING FUND LOSSES AS A RESULT. SOME\n                    JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\n                    WARRANTIES IN CONTRACTS WITH CONSUMERS, SO THE ABOVE\n                    EXCLUSION MAY NOT APPLY TO YOU.\n                </p>\n                <p>\n                    7. Assumption of Risk. Purchaser accepts and acknowledges\n                    all risks associated with the following: (a) Purchaser is\n                    solely responsible for determining what, if any, taxes apply\n                    to Purchaser’s purchase, sale, or transfer of the Haawks.\n                    The Hawk Game Developers are not responsible for determining\n                    or paying the taxes that apply to such transactions. (b) We\n                    do not store, send, or receive cryptocurrency assets. Any\n                    transfer of cryptocurrency assets occurs within the\n                    supporting blockchain that is not controlled by us.\n                    Transactions of the Haawks may be irreversible, and,\n                    accordingly, losses due to fraudulent or accidental\n                    transactions may not be recoverable. Some transactions of\n                    the Haawks shall be deemed to be made when recorded on a\n                    public blockchain ledger, which is not necessarily the date\n                    or time that Purchaser initiated the transaction. (c) There\n                    are risks associated with using an Internet based digital\n                    asset, including but not limited to, the risk of hardware,\n                    software and Internet connections, the risk of malicious\n                    software introduction, and the risk that third parties may\n                    obtain unauthorized access to information stored within your\n                    Wallet. The Hawk Game Developers will not be responsible for\n                    any communication failures, disruptions, errors, distortions\n                    or delays you may experience when effecting Haawk\n                    transactions, however caused. (d) Digital assets, including\n                    blockchain based assets such as the Haawks, are subject to\n                    developing laws and regulations throughout the world.\n                </p>\n                <p>\n                    8. Indemnity. Purchaser shall defend, indemnify, and hold\n                    The Hawk Game Developers, its licensors and affiliates (the\n                    “Indemnified Parties”) harmless from and against any and all\n                    claims, damages, losses, costs, investigations, liabilities,\n                    judgments, fines, penalties, settlements, interest, and\n                    expenses (including attorneys’ fees) that directly or\n                    indirectly arise from or are related to any claim, suit,\n                    action, demand, or proceeding made or brought by a third\n                    party (including any person who accesses or transacts using\n                    the Haawks whether or not such person personally purchased\n                    the Haawks) against the Indemnified Parties, or on account\n                    of the investigation, defense, or settlement thereof,\n                    arising out of or in connection with your breach of this\n                    Agreement.\n                </p>\n                <p>\n                    9. Limitation of Liability. (a) TO THE MAXIMUM EXTENT\n                    PERMITTED BY LAW, NEITHER THE HAWK GAME DEVELOPERS NOR ITS\n                    SERVICE PROVIDERS, INVOLVED IN CREATING, PRODUCING, OR\n                    DELIVERING THE HAAWKS WILL BE LIABLE FOR ANY INCIDENTAL,\n                    SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES, OR DAMAGES FOR\n                    LOST PROFITS, LOST REVENUES, LOST SAVINGS, LOST BUSINESS\n                    OPPORTUNITY, LOSS OF DATA OR GOODWILL, SERVICE INTERRUPTION,\n                    COMPUTER DAMAGE OR SYSTEM FAILURE OR THE COST OF SUBSTITUTE\n                    HAAWKS OF ANY KIND ARISING OUT OF OR IN CONNECTION WITH\n                    THESE TERMS OR FROM THE USE OF OR INABILITY TO USE OR\n                    INTERACT WITH THE HAAWKS OR ACCESS THE HAAWK ART, WHETHER\n                    BASED ON WARRANTY, CONTRACT, TORT (INCLUDING NEGLIGENCE),\n                    PRODUCT LIABILITY OR ANY OTHER LEGAL THEORY, AND WHETHER OR\n                    NOT THE HAWK GAME DEVELOPERS OR ITS SERVICE PROVIDERS HAS\n                    BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGE, EVEN IF A\n                    LIMITED REMEDY SET FORTH HEREIN IS FOUND TO HAVE FAILED OF\n                    ITS ESSENTIAL PURPOSE. (b) TO THE MAXIMUM EXTENT PERMITTED\n                    BY THE LAW OF THE APPLICABLE JURISDICTION, IN NO EVENT WILL\n                    THE HAWK GAME DEVELOPERS’ TOTAL LIABILITY ARISING OUT OF OR\n                    IN CONNECTION WITH THESE TERMS OR THE USE OF OR INABILITY TO\n                    USE OR INTERACT WITH THE HAAWKS OR ACCESS THE HAAWK ART\n                    EXCEED THE GREATER OF (A) THE AMOUNT YOU ACTUALLY PAUD US\n                    UNDER THESE TERMS IN THE PRIOR 12 MONTHS, OR (B) $500. (c)\n                    THE EXCLUSIONS AND LIMITATIONS OF DAMAGES SET FORTH ABOVE\n                    ARE FUNDAMENTAL ELEMENTS OF THE BASIS OF THE BARGAIN BETWEEN\n                    THE HAWK GAME DEVELOPERS AND PURCHASER.\n                </p>\n                <p>\n                    10. Governing Law and Forum Choice. This Agreement and any\n                    action related thereto will be governed by the laws of the\n                    State of Delaware, without regard to its conflict of laws\n                    provisions. Except as otherwise expressly set forth in\n                    Section 11 “Dispute Resolution,” the exclusive jurisdiction\n                    for all Disputes (defined below) that Purchaser and The Hawk\n                    Game Developers are not required to arbitrate will be the\n                    courts located in Delaware, and Purchaser and The Hawk Game\n                    Developers each waive any objection to jurisdiction and\n                    venue in such courts.\n                </p>\n                <p>\n                    11. Dispute Resolution. (a) Mandatory A rbitration of\n                    Disputes . The Parties each agree that any dispute, claim or\n                    controversy arising out of or relating to this Agreement or\n                    the breach, termination, enforcement, interpretation or\n                    validity thereof of the Haawks transaction (collectively,\n                    “Disputes”) will be resolved solely by binding, individual\n                    arbitration and not in a class, representative or\n                    consolidated action or proceeding. You and The Hawk Game\n                    Developers are each waiving the right to a trial by jury or\n                    to participate in a class action. This arbitration provision\n                    shall survive termination of this Agreement. (b) Exceptions\n                    . As limited exceptions to Section 11(a) above: (i) both\n                    Parties may seek to resolve a Dispute in small claims court\n                    if it qualifies; and (ii) both Parties each retain the right\n                    to seek injunctive or other equitable relief from a court to\n                    prevent (or enjoin) the infringement or misappropriation of\n                    our intellectual property rights. (c) Conducting Arbitration\n                    and Arbitration Rules . The arbitration will be conducted by\n                    JAMS under its JAMS Comprehensive Arbitration Rules and\n                    Procedures (the “JAMS Rules”) then in effect, except as\n                    modified by this Agreement. The JAMS Rules are available at\n                    https://www.jamsadr.com/. A party who wishes to start\n                    arbitration must submit a written Demand for Arbitration to\n                    JAMS and give notice to the other party as specified in the\n                    JAMS Rules. JAMS provides a form Demand for Arbitration at\n                    https://www.jamsadr.com/. Any arbitration hearings will take\n                    place in the county (or parish) where you live, unless we\n                    both agree to a different location but any such arbitration\n                    will be conducted remotely to the extent permitted by the\n                    JAMS Rules. The Parties agree that the arbitrator shall have\n                    exclusive authority to decide all issues relating to the\n                    interpretation, applicability, enforceability and scope of\n                    this arbitration agreement. (d) Arbitration Costs . Payment\n                    of all filing, administration and arbitrator fees will be\n                    governed by the JAMS Rules, and The Hawk Game Developers\n                    won’t seek to recover the administration and arbitrator fees\n                    The Hawk Game Developers is responsible for paying, unless\n                    the arbitrator finds your Dispute frivolous. If The Hawk\n                    Game Developers prevail in arbitration it will pay for all\n                    of its attorneys’ fees and costs and won’t seek to recover\n                    them from you. If you prevail in arbitration you will be\n                    entitled to an award of attorneys’ fees and expenses to the\n                    extent provided under applicable law. (e) Injunctive and\n                    Declaratory Relief . Except as provided in Section 11(b)\n                    above, the arbitrator shall determine all issues of\n                    liability on the merits of any claim asserted by either\n                    party and may award declaratory or injunctive relief only in\n                    favor of the individual party seeking relief and only to the\n                    extent necessary to provide relief warranted by that party’s\n                    individual claim. To the extent that you or The Hawk Game\n                    Developers prevail on a claim and seek public injunctive\n                    relief (that is, injunctive relief that has the primary\n                    purpose and effect of prohibiting unlawful acts that\n                    threaten future injury to the public), the entitlement to\n                    and extent of such relief must be litigated in a civil court\n                    of competent jurisdiction and not in arbitration. The\n                    parties agree that litigation of any issues of public\n                    injunctive relief shall be stayed pending the outcome of the\n                    merits of any individual claims in arbitration. (f) Class\n                    Action Waiver . YOU AND THE HAWK GAME DEVELOPERS AGREE THAT\n                    EACH MAY BRING CLAIMS AGAINST THE OTHER ONLY IN YOUR OR ITS\n                    INDIVIDUAL CAPACITY, AND NOT AS A PLAINTIFF OR CLASS MEMBER\n                    IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING.\n                    Further, if the parties’ Dispute is resolved through\n                    arbitration, the arbitrator may not consolidate another\n                    person’s claims with your claims, and may not otherwise\n                    preside over any form of a representative or class\n                    proceeding. If this specific provision is found to be\n                    unenforceable, then the entirety of this Dispute Resolution\n                    section shall be null and void. (g) Severability . With the\n                    exception of any of the provisions in Section 11(f) of this\n                    Agreement (“Class Action Waiver”), if an arbitrator or court\n                    of competent jurisdiction decides that any part of this\n                    Agreement is invalid or unenforceable, the other parts of\n                    this Agreement will still apply.\n                </p>\n                <p>\n                    12. Haawks may accumulate a utility token (“EGG”) when they\n                    are staked in the smart contract. EGG is built for one\n                    purpose and one purpose only: to enable you to mint more\n                    Haawks within the Hawk Game ecosystem. EGG has no other\n                    functionality other than within the Hawk Game ecosystem, and\n                    it cannot be purchased from The Hawk Game Developers. It can\n                    only be accumulated by staking your Haawks. The Hawk Game\n                    Developers do not provide or intend to provide a secondary\n                    marketplace for EGG.\n                </p>\n                <p>\n                    13. General Terms. This Agreement will transfer and be\n                    binding upon and will inure to the benefit of the parties\n                    and their permitted successors and assigns, in particular\n                    any Transferee. This Agreement constitutes the entire\n                    agreement, and supersedes any and all prior or\n                    contemporaneous representations, understandings and\n                    agreements, between the Parties with respect to the subject\n                    matter of this Agreement, all of which are hereby merged\n                    into this Agreement. Without limitation, the terms of any\n                    other document, course of dealing, or course of trade will\n                    not modify this Agreement, except as expressly provided in\n                    this Agreement or as the Parties may agree in writing. No\n                    amendment to this Agreement or waiver of any provision\n                    hereof will be valid or binding unless reduced to writing\n                    and duly executed by the Party or Parties to be bound\n                    thereby. Failure to promptly enforce a provision of this\n                    Agreement will not be construed as a waiver of such\n                    provision. Nothing contained in this Agreement will be\n                    deemed to create, or be construed as creating, a joint\n                    venture or partnership between the parties. Neither Party\n                    is, by virtue of this Agreement or otherwise, authorized as\n                    an agent or legal representative of the other Party. Neither\n                    Party to this Agreement is granted any right or authority to\n                    assume or to create any obligation or responsibility,\n                    express or implied, on behalf or in the name of the other\n                    party, or to bind such other Party in any manner. Nothing\n                    contained in this Agreement will be deemed to create any\n                    third-party beneficiary right upon any third party\n                    whatsoever. Each of the Parties acknowledges that it has had\n                    the opportunity to have this Agreement reviewed or not by\n                    independent legal counsel of its choice. If any one or more\n                    of the provisions of this Agreement should be ruled wholly\n                    or partly invalid or unenforceable, then the provisions held\n                    invalid or unenforceable will be deemed amended, and the\n                    court or other government body is authorized to reform the\n                    provision(s) to the minimum extent necessary to render them\n                    valid and enforceable in conformity with the parties’ intent\n                    as manifested herein. The headings to Sections of this\n                    Agreement are for convenience or reference only and do not\n                    form a part of this Agreement and will not in any way affect\n                    its interpretation. Neither Party will be afforded or denied\n                    preference in the construction of this Agreement, whether by\n                    virtue of being the drafter or otherwise. For purposes of\n                    this Agreement, the words and phrases “include,” “includes”,\n                    “including” and “such as” are deemed to be followed by the\n                    words “without limitation”. The Parties have agreed to\n                    contract electronically, and accordingly, electronic\n                    signatures will be given the same effect and weight as\n                    originals.\n                </p>\n            </article>\n        </div>\n    )\n}","import { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n    TARGET_CHAIN_ID,\n    EGG_ADDRESS_MAP,\n    HAAWK_ADDRESS_MAP,\n    COOP_ADDRESS_MAP,\n} from \"./constants\";\n\nexport default function Whitepaper() {\n    const { t } = useTranslation();\n    const mintFee = 0.1288;\n    return (\n        <>\n            <Helmet>\n                <title>🦅 {t(\"Hawk Game\")}</title>\n                <html class=\"paper light\" />\n            </Helmet>\n            <div className=\"paper container\">\n                <article className=\"article\">\n                    <h1 className=\"article-title\">Whitepaper</h1>\n                    <p className=\"article-meta\">\n                        Written by The Hawk Game Developers\n                    </p>\n                    <p>\n                        On a quaint farm in the metaverse, a flock of Chicken\n                        congregate and produce a healthy supply of $EGG. They\n                        huddle together in a Coop and are sheared regularly by\n                        their owners to farm the $EGG. With more $EGG, the\n                        farmers can purchase more Chicken! But outside lurk\n                        dangers the Chicken are terrified of… The Hawks.\n                    </p>\n                    <p>\n                        The Hawks are on the hunt for Chicken and their precious\n                        $EGG. They’ll take it by any means necessary. They’ll\n                        kidnap Chicken or catch them unaware and steal all of\n                        their $EGG. So the farmers struck a deal with the Hawks:\n                        they pay the Hawks a tax on all $EGG production. In\n                        return, the Hawks don’t attack Chicken who are safe in\n                        the Coop.\n                    </p>\n                    <p>\n                        But when a Chicken leaves the farm or new Chicken are\n                        born… The Hawks don’t hold back.\n                    </p>\n                    <p>---------------</p>\n                    <p>\n                        Hawk Game is a risk protocol for NFTs with novel\n                        tokenomics. It shows what’s possible with interactions\n                        between the ERC-20 and ERC-721 protocols.For the very\n                        first time, your NFT can steal other NFTs (ERC-721\n                        tokens) for you. The rarer your NFT, the more tokens\n                        you'll accumulate probabilistically. Hawk Game is\n                        pioneering new types of NFT mechanics. Fully\n                        decentralized. No roadmaps or empty promises. Just a\n                        game in the metaverse that’s ready to play at launch.\n                    </p>\n                    <h4>The tl;dr:</h4>\n                    <ul>\n                        <li>\n                            There will only ever be 10,000 Gen 0, minted for{\" \"}\n                            {mintFee}\n                            BNB each. The 40,000 Gen 1 are minted by farming\n                            $EGG\n                        </li>\n                        <li>\n                            Chicken can be staked in the Coop to earn $EGG and\n                            pay a tax anytime they claim their $EGG earnings\n                        </li>\n                        <li>\n                            If a Chicken is unstaked from the Coop, the Hawks\n                            try to steal all of its accumulated $EGG\n                        </li>\n                        <li>\n                            When a new Chicken is born, the Hawks attempt to\n                            kidnap it. If they’re successful, it’s given to a\n                            randomly selected Hawk, instead of the owner who\n                            minted it\n                        </li>\n                    </ul>\n                    <h2 className=\"text-secondary\">Contract Addresses</h2>\n                    <ul>\n                         \n                        <li>\n                            Chicken / Hawk NFT:\n                            <u className=\"text-warning\">\n                                {HAAWK_ADDRESS_MAP[TARGET_CHAIN_ID]}\n                            </u>\n                        </li>\n                         \n                        <li>\n                            Coop / Gang Staking:\n                            <u className=\"text-warning\">\n                                {COOP_ADDRESS_MAP[TARGET_CHAIN_ID]}\n                            </u>\n                        </li>\n                         \n                        <li>\n                            $EGG Token:{\" \"}\n                            <u className=\"text-warning\">\n                                {EGG_ADDRESS_MAP[TARGET_CHAIN_ID]}\n                            </u>\n                        </li>\n                    </ul>\n                    <h2 className=\"text-secondary\">Minting</h2>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Token ID</th>\n                                <th>Minting Cost</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>1 to 10,000 (Gen 0)</td>\n                                <td>{mintFee} BNB</td>\n                            </tr>\n                            <tr>\n                                <td>10,001 to 20,000</td>\n                                <td>20,000 $EGG</td>\n                            </tr>\n                            <tr>\n                                <td>20,001 to 40,000</td>\n                                <td>40,000 $EGG</td>\n                            </tr>\n                            <tr>\n                                <td>40,001 to 50,000</td>\n                                <td>80,000 $EGG</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <p>\n                        The total cost to mint all of the Chicken and Hawks in\n                        existence will be 1,800,000 $EGG.\n                    </p>\n                    <h2 className=\"text-secondary\">Chicken</h2>\n                    <p>\n                        You have a 90% chance of minting a Chicken, each with\n                        unique traits. Here are the actions they can take:\n                    </p>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Action</th>\n                                <th>Notes</th>\n                                <th>Risk</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Enter Coop (Stake)</td>\n                                <td>\n                                    Accumulate 10,000 $EGG / day (prorated to\n                                    the second)\n                                </td>\n                                <td>No risk.</td>\n                            </tr>\n                            <tr>\n                                <td>Shear $EGG (Claim)</td>\n                                <td>\n                                    Receive 80% of $EGG accumulated on your\n                                    Chicken\n                                </td>\n                                <td>\n                                    Hawks take a guaranteed 20% tax on sheared\n                                    $EGG in return for not attacking the Coop.\n                                    Taxed $EGG is split among all the Hawks\n                                    currently staked in the Coop, proportional\n                                    to their Alpha scores.\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>Leave Coop (Unstake)</td>\n                                <td>\n                                    Chicken is removed from the Coop and all\n                                    $EGG is shorn.\n                                    <u>\n                                        Can only be done if the Chicken has\n                                        accumulated 2 days worth of $EGG to keep\n                                        it warm.\n                                    </u>\n                                </td>\n                                <td>\n                                    50% chance of ALL of your accumulated $EGG\n                                    being stolen by Hawks. Stolen $EGG is split\n                                    among all the Hawks currently staked in the\n                                    Coop, proportional to their Alpha scores.\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <h2 className=\"text-secondary\">$EGG</h2>\n                    <p>The maximum $EGG supply is 5,000,000,000 $EGG:</p>\n                    <p>\n                        When supply reaches 2,400,000,000 $EGG earned for\n                        staking, the staking “faucet” turns off. The developers\n                        will receive 600,000,000 $EGG Community Rewards will be\n                        allocated 2,000,000,000 $EGG\n                    </p>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Action</th>\n                                <th>Notes</th>\n                                <th>Risk</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Mint a new Chicken using $EGG</td>\n                                <td>\n                                    There is a 10% chance that the NFT is\n                                    actually a Hawk!\n                                </td>\n                                <td>\n                                    10% chance of the new Chicken or Hawk being\n                                    stolen by a staked Hawk. Each Hawk’s chance\n                                    of success is proportional to their Alpha\n                                    scores.\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <h2 className=\"text-secondary\">Hawks</h2>\n                    <p>\n                        You have a 10% chance of minting a Hawk, each with\n                        unique traits, including an Alpha value ranging from 5\n                        to 8. The higher the Alpha value:\n                    </p>\n                    <ul>\n                        <li>\n                            The higher the portion of $EGG that the Hawk earns\n                            from taxes\n                        </li>\n                        <li>\n                            The higher chance of stealing a newly minted Chicken\n                            or Hawk\n                        </li>\n                    </ul>\n                    <h4>Example:</h4>\n                    <p>\n                        Hawk A has an Alpha of 8 and Hawk B has an Alpha of 6,\n                        and they are staked.\n                    </p>\n                    <ul>\n                        <li>\n                            If 70,000 $EGG total have been accumulated as taxes,\n                            Hawk A will be able to claim 40,000 $EGG and Hawk B\n                            will be able to claim 30,000 $EGG\n                        </li>\n                        <li>\n                            If a newly minted Chicken or Hawk is stolen, Hawk A\n                            has a 57% chance of receiving it and Hawk B has a\n                            43% chance of receiving it\n                        </li>\n                    </ul>\n                    <p>\n                        <u>\n                            Only staked Hawks are able to steal a Chicken or\n                            earn the $EGG tax.\n                        </u>\n                    </p>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Action</th>\n                                <th>Notes</th>\n                                <th>Risk</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Stake Hawk</td>\n                                <td>\n                                    Earn your share of the 20% tax of all $EGG\n                                    generated by Chicken in the Coop\n                                </td>\n                                <td>No risk.</td>\n                            </tr>\n                            <tr>\n                                <td>Claim $EGG</td>\n                                <td>\n                                    Receive all $EGG taxes accrued for the\n                                    staked Hawk\n                                </td>\n                                <td>No risk.</td>\n                            </tr>\n                            <tr>\n                                <td>Unstake Hawk</td>\n                                <td>\n                                    Receive all $EGG taxes accrued for the\n                                    staked Hawk\n                                </td>\n                                <td>No risk.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <h2 className=\"text-secondary\">Why this tech is novel</h2>\n                    <p>\n                        Protocol-level risk is ripe for exploration in NFTs.\n                        Many projects are implementing stake-to-earn, but\n                        haven’t cracked the code on users making choices in the\n                        face of risk.\n                    </p>\n                    <p>\n                        In the case of Hawk Game’s Hawk-eat-Chicken world, your\n                        NFT can steal ERC-20 and ERC-721 tokens for you. This is\n                        entirely new.\n                    </p>\n                    <p>\n                        Everything in Hawk Game happens on-chain: the\n                        decisioning, the results, the generation of the NFTs\n                        themselves. It’s split between 4 different smart\n                        contracts so that anyone can read through and get a\n                        sense of how it all talks to each other.\n                    </p>\n                    <p>\n                        There are a number of techniques in these contracts that\n                        make this all possible while maintaining accuracy,\n                        keeping gas costs down, and not exceeding the EVM\n                        contract size limit.\n                    </p>\n                    <h4>Data Packing:</h4>\n                    <p>\n                        Storage is expensive on the blockchain! One 256 bit\n                        integer costs 20,000 gas to save, which at today’s costs\n                        is about $7.50… for one number! Efficiently packing data\n                        types by designing around smaller max values can save\n                        users hundreds of thousands of dollars over the lifetime\n                        of the project\n                    </p>\n                    <h4>Constant Time Algorithms & DeFi Math:</h4>\n                    <p>\n                        A lot of contracts use architectures that require\n                        significant looping to accomplish tasks. Those make\n                        contracts inefficient and add to gas costs. It’s\n                        imperative to remove things like the need to search\n                        through arrays or loop through stakes. This means you\n                        can do things like unlimited simultaneous stakes while\n                        keeping things cheaper.\n                    </p>\n                    <p>\n                        As an example, the minting contract uses AJ Walker’s\n                        Alias Method to efficiently select traits in constant\n                        time.\n                    </p>\n                    <p>\n                        Another example: tracking Hawk $EGG earnings (taxes)\n                        proved to be very complex, requiring math used by DeFi\n                        liquidity pool protocols.\n                    </p>\n                    <h4>100% On-chain:</h4>\n                    <p>\n                        Not the first, and certainly not the last. But as long\n                        as avalanche is running, your Chicken and Hawks will\n                        survive. Always available and always yours. Your traits\n                        and all the pixel art reside in the contracts\n                        themselves, nowhere else.\n                    </p>\n                    <h4>UI at launch:</h4>\n                    <p>\n                        You can use the entirety of Hawk Game by directly\n                        interacting with the blockchain (like through bscscan).\n                        But Hawk Game is launching with a custom UI to make it\n                        easy for people to enjoy the game on day 1.\n                    </p>\n                    <h2 className=\"text-secondary\">In conclusion...</h2>\n                    <p>\n                        With Hawk Game, everyone can play with their own level\n                        of risk… Pay the tax? Stay liquid on the market? Take a\n                        chance to keep all your $EGG, but have a chance to lose\n                        it all? The choices and this game have to be engaging.\n                    </p>\n                    <p>\n                        Hawks preying on Chicken feels almost like a parallel to\n                        the NFT community itself: A select few with alpha among\n                        all of us, and many others following the pack.\n                    </p>\n                </article>\n            </div>\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./i18n\";\nimport App from \"./App\";\nimport Tos from \"./Tos\";\nimport Whitepaper from \"./Whitepaper\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChainId, DAppProvider } from \"@usedapp/core\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nconst config = {\n    readOnlyChainId: ChainId.BSCTestnet,\n    readOnlyUrls: {\n        [ChainId.BSCTestnet]: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\n        [ChainId.BSC]: \"https://bsc-dataseed.binance.org/\",\n    },\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <DAppProvider config={config}>\n            <Router>\n                <Routes>\n                    <Route path=\"/\" element={<App />} />\n                    <Route path=\"/tos\" element={<Tos />} />\n                    <Route path=\"/whitepaper\" element={<Whitepaper />} />\n                </Routes>\n            </Router>\n        </DAppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}